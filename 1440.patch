From c0918ead14116c1b7d56cc86e5fa0c98fb366953 Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Wed, 16 Sep 2020 14:52:19 +0800
Subject: [PATCH 1/5] overview: Add a 'closing' getter

Which better communicates what we are checking for, and is a little more
elegant than repeatedly writing:
```
Main.overview.animationInProgress && Main.overview.visibleTarget == false
```
---
 js/ui/overview.js | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/js/ui/overview.js b/js/ui/overview.js
index c71b113898..12b9669272 100644
--- a/js/ui/overview.js
+++ b/js/ui/overview.js
@@ -134,6 +134,10 @@ var Overview = class {
         return this._visibleTarget;
     }
 
+    get closing() {
+        return this._animationInProgress && !this._visibleTarget;
+    }
+
     _createOverview() {
         if (this._overview)
             return;
-- 
GitLab


From 064b2488791d1456d21c41533a22541e1740fccf Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Wed, 16 Sep 2020 14:56:13 +0800
Subject: [PATCH 2/5] workspace: Ignore new windows that appear while the
 overview is closing

This can easily happen if an app launches and maps a window faster than
the overview closes. We don't want the window clone appearing and then
suddenly disappearing in that case.
---
 js/ui/workspace.js | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/js/ui/workspace.js b/js/ui/workspace.js
index 75efe4d992..b3451a7969 100644
--- a/js/ui/workspace.js
+++ b/js/ui/workspace.js
@@ -1261,7 +1261,8 @@ class Workspace extends St.Widget {
     }
 
     _windowAdded(metaWorkspace, metaWin) {
-        this._doAddWindow(metaWin);
+        if (!Main.overview.closing)
+            this._doAddWindow(metaWin);
     }
 
     _windowRemoved(metaWorkspace, metaWin) {
@@ -1269,7 +1270,7 @@ class Workspace extends St.Widget {
     }
 
     _windowEnteredMonitor(metaDisplay, monitorIndex, metaWin) {
-        if (monitorIndex == this.monitorIndex)
+        if (monitorIndex === this.monitorIndex && !Main.overview.closing)
             this._doAddWindow(metaWin);
     }
 
-- 
GitLab


From 4f62cb4cb633c1385e6ed9a28e2f9dac7bccd3b0 Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Wed, 16 Sep 2020 15:03:47 +0800
Subject: [PATCH 3/5] windowManager: Allow animations to start if the overview
 is closing

So the `WindowManager._mapWindow` animation doesn't get skipped if the
overview is visible but closing.
---
 js/ui/windowManager.js | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/js/ui/windowManager.js b/js/ui/windowManager.js
index d01bac19c7..2ded682362 100644
--- a/js/ui/windowManager.js
+++ b/js/ui/windowManager.js
@@ -1118,7 +1118,8 @@ var WindowManager = class {
     }
 
     _shouldAnimate() {
-        return !(Main.overview.visible || this._workspaceAnimation.gestureActive);
+        const overviewOpen = Main.overview.visible && !Main.overview.closing;
+        return !(overviewOpen || this._workspaceAnimation.gestureActive);
     }
 
     _shouldAnimateActor(actor, types) {
-- 
GitLab


From 4a2b3fa3dcf76f852a69e462ff91f53a120a0069 Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Thu, 17 Sep 2020 15:24:12 +0800
Subject: [PATCH 4/5] overview: Emit 'hidden' after it's *really* hidden

Previously we would emit 'hidden' before the overview was fully hidden,
so any attempts to animate windows on that signal could still fail.
---
 js/ui/overview.js | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/js/ui/overview.js b/js/ui/overview.js
index 12b9669272..414d4c23ea 100644
--- a/js/ui/overview.js
+++ b/js/ui/overview.js
@@ -609,7 +609,6 @@ var Overview = class {
         this._visible = false;
         this._animationInProgress = false;
 
-        this.emit('hidden');
         // Handle any calls to show* while we were hiding
         if (this._shown)
             this._animateVisible(OverviewControls.ControlsState.WINDOW_PICKER);
@@ -619,6 +618,8 @@ var Overview = class {
         Main.panel.style = null;
 
         this._syncGrab();
+
+        this.emit('hidden');
     }
 
     toggle() {
-- 
GitLab


From 10c86953081cf6dd49a54688602897d506eeb214 Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Thu, 17 Sep 2020 15:25:49 +0800
Subject: [PATCH 5/5] windowManager: Animate the appearance of new windows
 after overview closes

So that the animation doesn't get skipped if the overview is visible but
in the process of closing.

In this case the overview being visible also means that it is closing,
because if it's visible and not already closing then `_shouldAnimateActor`
would have returned false and exited `_mapWindow` earlier.

Fixes: https://gitlab.gnome.org/GNOME/gnome-shell/-/issues/1814,
       https://gitlab.gnome.org/GNOME/gnome-shell/-/issues/3242
---
 js/ui/windowManager.js | 15 +++++++++++++--
 1 file changed, 13 insertions(+), 2 deletions(-)

diff --git a/js/ui/windowManager.js b/js/ui/windowManager.js
index 2ded682362..011ca66291 100644
--- a/js/ui/windowManager.js
+++ b/js/ui/windowManager.js
@@ -1446,6 +1446,17 @@ var WindowManager = class {
         dimmer.setDimmed(false, this._shouldAnimate());
     }
 
+    _easeAfterOverview(actor, props) {
+        if (Main.overview.visible) {
+            let id = Main.overview.connect('hidden', () => {
+                actor.ease(props);
+                Main.overview.disconnect(id);
+            });
+        } else {
+            actor.ease(props);
+        }
+    }
+
     _mapWindow(shellwm, actor) {
         actor._windowType = actor.meta_window.get_window_type();
         actor._notifyWindowTypeSignalId =
@@ -1488,7 +1499,7 @@ var WindowManager = class {
             actor.show();
             this._mapping.add(actor);
 
-            actor.ease({
+            this._easeAfterOverview(actor, {
                 opacity: 255,
                 scale_x: 1,
                 scale_y: 1,
@@ -1505,7 +1516,7 @@ var WindowManager = class {
             actor.show();
             this._mapping.add(actor);
 
-            actor.ease({
+            this._easeAfterOverview(actor, {
                 opacity: 255,
                 scale_x: 1,
                 scale_y: 1,
-- 
GitLab

