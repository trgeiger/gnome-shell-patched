From fbaa44a66a813216f1cfee351b6af89e6dae7a12 Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Tue, 25 May 2021 17:33:01 +0800
Subject: [PATCH 1/3] st/theme-node-drawing: Conditionally paint the center
 shadow rectangle

Only when part of it is actually visible.

Because the central rectangle is generally the largest part, this
eliminates most of the shadow's render time. For example, animating
`.workspace-background` by tapping Super, the shell's overall render
time is reduced about 15%.
---
 src/st/st-theme-node-drawing.c | 25 +++++++++++++++----------
 1 file changed, 15 insertions(+), 10 deletions(-)

diff --git a/src/st/st-theme-node-drawing.c b/src/st/st-theme-node-drawing.c
index f839d990ed..715b08f853 100644
--- a/src/st/st-theme-node-drawing.c
+++ b/src/st/st-theme-node-drawing.c
@@ -2159,16 +2159,21 @@ st_theme_node_paint_sliced_shadow (StThemeNodePaintState *state,
       rectangles[idx++] = s_bottom;
     }
 
-  /* Center middle */
-  rectangles[idx++] = left;
-  rectangles[idx++] = top;
-  rectangles[idx++] = right;
-  rectangles[idx++] = bottom;
-
-  rectangles[idx++] = s_left;
-  rectangles[idx++] = s_top;
-  rectangles[idx++] = s_right;
-  rectangles[idx++] = s_bottom;
+  /* Center middle is visible? */
+  if (paint_opacity < 255 ||
+      xoffset > shadow_blur_radius || left < 0 ||
+      yoffset > shadow_blur_radius || top < 0)
+    {
+      rectangles[idx++] = left;
+      rectangles[idx++] = top;
+      rectangles[idx++] = right;
+      rectangles[idx++] = bottom;
+
+      rectangles[idx++] = s_left;
+      rectangles[idx++] = s_top;
+      rectangles[idx++] = s_right;
+      rectangles[idx++] = s_bottom;
+    }
 
   if (xend > right)
     {
-- 
GitLab


From 1089aa4aa81ccf27c44285f2f4e67b83f785e5aa Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Thu, 27 May 2021 17:12:15 +0800
Subject: [PATCH 2/3] st/theme-node-drawing: Render box-shadow independently of
 background-color

Until now, the absence of a `background-color` would cause `box-shadow`s
to be invisible. That was a bug because `box-shadow` is meant to be either
the color specified in `box-shadow`, or if none was specified then the
foreground `color`.

There is nothing in the spec that says the `box-shadow` rendering should
depend on `background-color`, so separate them. This ensures `box-shadow`
is rendered even when `background-color` is absent or transparent.

https://www.w3.org/TR/css-backgrounds-3/#box-shadow
---
 src/st/st-theme-node-drawing.c | 29 +++++++++++++++++++++--------
 1 file changed, 21 insertions(+), 8 deletions(-)

diff --git a/src/st/st-theme-node-drawing.c b/src/st/st-theme-node-drawing.c
index 715b08f853..1167e45b02 100644
--- a/src/st/st-theme-node-drawing.c
+++ b/src/st/st-theme-node-drawing.c
@@ -409,7 +409,12 @@ st_theme_node_lookup_corner (StThemeNode    *node,
   if (corner.color.alpha == 0 &&
       corner.border_color_1.alpha == 0 &&
       corner.border_color_2.alpha == 0)
-    return NULL;
+    {
+      if (node->box_shadow == NULL)
+        return NULL;
+      else  /* We still need a corner texture to render the box-shadow */
+        corner.color = (ClutterColor) {0, 0, 0, 255};
+    }
 
   key = corner_to_string (&corner);
   texture = st_texture_cache_load (cache, key, ST_TEXTURE_CACHE_POLICY_FOREVER, load_corner, &corner, NULL);
@@ -1355,7 +1360,8 @@ st_theme_node_prerender_background (StThemeNode *node,
 static void st_theme_node_paint_borders (StThemeNodePaintState *state,
                                          CoglFramebuffer       *framebuffer,
                                          const ClutterActorBox *box,
-                                         guint8                 paint_opacity);
+                                         guint8                 paint_opacity,
+                                         gboolean               silhouette);
 
 void
 st_theme_node_invalidate_border_image (StThemeNode *node)
@@ -1580,7 +1586,7 @@ st_theme_node_render_resources (StThemeNodePaintState *state,
         state->box_shadow_pipeline = _st_create_shadow_pipeline (box_shadow_spec,
                                                                  state->prerendered_texture,
                                                                  state->resource_scale);
-      else if (node->background_color.alpha > 0 || has_border)
+      else
         st_theme_node_prerender_shadow (state);
     }
 
@@ -1697,7 +1703,8 @@ static void
 st_theme_node_paint_borders (StThemeNodePaintState *state,
                              CoglFramebuffer       *framebuffer,
                              const ClutterActorBox *box,
-                             guint8                 paint_opacity)
+                             guint8                 paint_opacity,
+                             gboolean               silhouette)
 {
   StThemeNode *node = state->node;
   float width, height;
@@ -1708,6 +1715,7 @@ st_theme_node_paint_borders (StThemeNodePaintState *state,
   int corner_id, side_id;
   ClutterColor border_color;
   guint8 alpha;
+  gboolean corners_are_transparent;
 
   width = box->x2 - box->x1;
   height = box->y2 - box->y1;
@@ -1802,8 +1810,13 @@ st_theme_node_paint_borders (StThemeNodePaintState *state,
         }
     }
 
+  corners_are_transparent =
+    (node->background_color.alpha == 0 && node->border_color[0].alpha == 0);
+
   /* corners */
-  if (max_border_radius > 0 && paint_opacity > 0)
+  if (max_border_radius > 0 &&
+      paint_opacity > 0 &&
+      (silhouette || !corners_are_transparent))
     {
       for (corner_id = 0; corner_id < 4; corner_id++)
         {
@@ -1852,7 +1865,7 @@ st_theme_node_paint_borders (StThemeNodePaintState *state,
     }
 
   /* background color */
-  alpha = paint_opacity * node->background_color.alpha / 255;
+  alpha = silhouette ? 255 : paint_opacity * node->background_color.alpha / 255;
   if (alpha > 0)
     {
       st_theme_node_ensure_color_pipeline (node);
@@ -2312,7 +2325,7 @@ st_theme_node_prerender_shadow (StThemeNodePaintState *state)
                               state->resource_scale, 1);
       cogl_framebuffer_clear4f (framebuffer, COGL_BUFFER_BIT_COLOR, 0, 0, 0, 0);
 
-      st_theme_node_paint_borders (state, framebuffer, &box, 0xFF);
+      st_theme_node_paint_borders (state, framebuffer, &box, 0xFF, TRUE);
 
       state->box_shadow_pipeline = _st_create_shadow_pipeline (st_theme_node_get_box_shadow (node),
                                                                buffer, state->resource_scale);
@@ -2668,7 +2681,7 @@ st_theme_node_paint (StThemeNode           *node,
     }
   else
     {
-      st_theme_node_paint_borders (state, framebuffer, box, paint_opacity);
+      st_theme_node_paint_borders (state, framebuffer, box, paint_opacity, FALSE);
     }
 
   st_theme_node_paint_outline (node, framebuffer, box, paint_opacity);
-- 
GitLab


From db16bca921f965bac2306d40b0d7a43d01f2be95 Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Thu, 27 May 2021 17:47:14 +0800
Subject: [PATCH 3/3] theme: Remove background-color from .workspace-background

It's not visible because it's covered by the actual wallpaper, so
not rendering it eliminates most of the render time for
`workspace-background`, without changing its appearance.

When animating the overview by tapping Super, this reduces the
shell's overall render time by about 15%.
---
 data/theme/gnome-shell-sass/widgets/_window-picker.scss | 1 -
 1 file changed, 1 deletion(-)

diff --git a/data/theme/gnome-shell-sass/widgets/_window-picker.scss b/data/theme/gnome-shell-sass/widgets/_window-picker.scss
index b3b93f291a..fa3f191945 100644
--- a/data/theme/gnome-shell-sass/widgets/_window-picker.scss
+++ b/data/theme/gnome-shell-sass/widgets/_window-picker.scss
@@ -48,6 +48,5 @@ $window_close_button_padding: 3px;
 .workspace-background {
   // keep in sync with BACKGROUND_CORNER_RADIUS_PIXELS in workspace.js
   border-radius: 30px;
-  background-color: $osd_bg_color;
   box-shadow: 0 4px 16px 4px transparentize(darken($osd_bg_color, 30%), 0.7);
 }
-- 
GitLab

